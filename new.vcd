$date
  Sun Mar 19 22:33:06 2017
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 1 ! clock $end
$var reg 1 " full_c1_u $end
$var reg 1 # full_c2_u $end
$var reg 1 $ full_b_m $end
$var reg 73 % cpu_res1[72:0] $end
$var reg 73 & cpu_res2[72:0] $end
$var reg 73 ' cpu_req1[72:0] $end
$var reg 73 ( cpu_req2[72:0] $end
$var reg 553 ) bus_res1[552:0] $end
$var reg 553 * bus_res2[552:0] $end
$var reg 1 + snoop_hit1 $end
$var reg 1 , snoop_hit2 $end
$var reg 73 - snoop_req1[72:0] $end
$var reg 73 . snoop_req2[72:0] $end
$var reg 73 / snoop_res1[72:0] $end
$var reg 73 0 snoop_res2[72:0] $end
$var reg 76 1 snoop_req[75:0] $end
$var reg 76 2 snoop_res[75:0] $end
$var reg 1 3 snoop_hit $end
$var reg 73 4 bus_req1[72:0] $end
$var reg 73 5 bus_req2[72:0] $end
$var reg 76 6 memres[75:0] $end
$var reg 76 7 tomem[75:0] $end
$var reg 1 8 full_crq1 $end
$var reg 1 9 full_srq1 $end
$var reg 1 : full_brs1 $end
$var reg 1 ; full_wb1 $end
$var reg 1 < full_srs1 $end
$var reg 1 = full_crq2 $end
$var reg 1 > full_brs2 $end
$var reg 1 ? full_wb2 $end
$var reg 1 @ full_srs2 $end
$var reg 1 A reset $end
$var reg 1 B done1 $end
$var reg 1 C done2 $end
$var reg 553 D mem_wb[552:0] $end
$var reg 553 E wb_req1[552:0] $end
$var reg 553 F wb_req2[552:0] $end
$var reg 1 G wb_ack $end
$var reg 5 H pwrreq[4:0] $end
$var reg 5 I pwrres[4:0] $end
$var reg 1 J pwrreq_full $end
$var reg 76 K gfx_b[75:0] $end
$var reg 76 L togfx[75:0] $end
$var reg 73 M gfx_upreq[72:0] $end
$var reg 73 N gfx_upres[72:0] $end
$var reg 73 O gfx_wb[72:0] $end
$var reg 1 P gfx_upreq_full $end
$var reg 1 Q gfx_wb_ack $end
$var reg 3 R pwr_gfxreq[2:0] $end
$var reg 3 S pwr_gfxres[2:0] $end
$var reg 3 T pwr_audioreq[2:0] $end
$var reg 3 U pwr_audiores[2:0] $end
$var reg 3 V pwr_usbreq[2:0] $end
$var reg 3 W pwr_usbres[2:0] $end
$var reg 3 X pwr_uartreq[2:0] $end
$var reg 3 Y pwr_uartres[2:0] $end
$var reg 54 Z audio_b[53:0] $end
$var reg 54 [ toaudio[53:0] $end
$var reg 73 \ audio_upreq[72:0] $end
$var reg 73 ] audio_upres[72:0] $end
$var reg 73 ^ audio_wb[72:0] $end
$var reg 1 _ audio_upreq_full $end
$var reg 1 ` audio_wb_ack $end
$var reg 76 a usb_b[75:0] $end
$var reg 76 b tousb[75:0] $end
$var reg 73 c usb_upreq[72:0] $end
$var reg 73 d usb_upres[72:0] $end
$var reg 73 e usb_wb[72:0] $end
$var reg 1 f usb_upreq_full $end
$var reg 1 g usb_wb_ack $end
$var reg 1 h zero $end
$var reg 73 i zero72[72:0] $end
$var reg 76 j zero75[75:0] $end
$var reg 76 k uart_b[75:0] $end
$var reg 76 l touart[75:0] $end
$var reg 73 m uart_upreq[72:0] $end
$var reg 73 n uart_upres[72:0] $end
$var reg 73 o uart_wb[72:0] $end
$var reg 1 p uart_upreq_full $end
$var reg 1 q uart_wb_ack $end
$var reg 76 r up_snoop[75:0] $end
$var reg 76 s up_snoop_res[75:0] $end
$var reg 1 t up_snoop_hit $end
$var reg 32 u waddr[31:0] $end
$var reg 10 v wlen[9:0] $end
$var reg 10 w wsize[9:0] $end
$var reg 1 x wvalid $end
$var reg 1 y wready $end
$var reg 32 z wdata[31:0] $end
$var reg 4 { wtrb[3:0] $end
$var reg 1 | wlast $end
$var reg 1 } wdvalid $end
$var reg 1 !" wdataready $end
$var reg 1 "" wrready $end
$var reg 1 #" wrvalid $end
$var reg 2 $" wrsp[1:0] $end
$var reg 32 %" raddr[31:0] $end
$var reg 10 &" rlen[9:0] $end
$var reg 10 '" rsize[9:0] $end
$var reg 1 (" rvalid $end
$var reg 1 )" rready $end
$var reg 32 *" rdata[31:0] $end
$var reg 4 +" rstrb[3:0] $end
$var reg 1 ," rlast $end
$var reg 1 -" rdvalid $end
$var reg 1 ." rdready $end
$var reg 2 /" rres[1:0] $end
$var reg 32 0" waddr_gfx[31:0] $end
$var reg 10 1" wlen_gfx[9:0] $end
$var reg 10 2" wsize_gfx[9:0] $end
$var reg 1 3" wvalid_gfx $end
$var reg 1 4" wready_gfx $end
$var reg 32 5" wdata_gfx[31:0] $end
$var reg 4 6" wtrb_gfx[3:0] $end
$var reg 1 7" wlast_gfx $end
$var reg 1 8" wdvalid_gfx $end
$var reg 1 9" wdataready_gfx $end
$var reg 1 :" wrready_gfx $end
$var reg 1 ;" wrvalid_gfx $end
$var reg 2 <" wrsp_gfx[1:0] $end
$var reg 32 =" raddr_gfx[31:0] $end
$var reg 10 >" rlen_gfx[9:0] $end
$var reg 10 ?" rsize_gfx[9:0] $end
$var reg 1 @" rvalid_gfx $end
$var reg 1 A" rready_gfx $end
$var reg 32 B" rdata_gfx[31:0] $end
$var reg 4 C" rstrb_gfx[3:0] $end
$var reg 1 D" rlast_gfx $end
$var reg 1 E" rdvalid_gfx $end
$var reg 1 F" rdready_gfx $end
$var reg 2 G" rres_gfx[1:0] $end
$var reg 32 H" waddr_uart[31:0] $end
$var reg 10 I" wlen_uart[9:0] $end
$var reg 10 J" wsize_uart[9:0] $end
$var reg 1 K" wvalid_uart $end
$var reg 1 L" wready_uart $end
$var reg 32 M" wdata_uart[31:0] $end
$var reg 4 N" wtrb_uart[3:0] $end
$var reg 1 O" wlast_uart $end
$var reg 1 P" wdvalid_uart $end
$var reg 1 Q" wdataready_uart $end
$var reg 1 R" wrready_uart $end
$var reg 1 S" wrvalid_uart $end
$var reg 2 T" wrsp_uart[1:0] $end
$var reg 32 U" raddr_uart[31:0] $end
$var reg 10 V" rlen_uart[9:0] $end
$var reg 10 W" rsize_uart[9:0] $end
$var reg 1 X" rvalid_uart $end
$var reg 1 Y" rready_uart $end
$var reg 32 Z" rdata_uart[31:0] $end
$var reg 4 [" rstrb_uart[3:0] $end
$var reg 1 \" rlast_uart $end
$var reg 1 ]" rdvalid_uart $end
$var reg 1 ^" rdready_uart $end
$var reg 2 _" rres_uart[1:0] $end
$var reg 32 `" waddr_usb[31:0] $end
$var reg 10 a" wlen_usb[9:0] $end
$var reg 10 b" wsize_usb[9:0] $end
$var reg 1 c" wvalid_usb $end
$var reg 1 d" wready_usb $end
$var reg 32 e" wdata_usb[31:0] $end
$var reg 4 f" wtrb_usb[3:0] $end
$var reg 1 g" wlast_usb $end
$var reg 1 h" wdvalid_usb $end
$var reg 1 i" wdataready_usb $end
$var reg 1 j" wrready_usb $end
$var reg 1 k" wrvalid_usb $end
$var reg 2 l" wrsp_usb[1:0] $end
$var reg 32 m" raddr_usb[31:0] $end
$var reg 10 n" rlen_usb[9:0] $end
$var reg 10 o" rsize_usb[9:0] $end
$var reg 1 p" rvalid_usb $end
$var reg 1 q" rready_usb $end
$var reg 32 r" rdata_usb[31:0] $end
$var reg 4 s" rstrb_usb[3:0] $end
$var reg 1 t" rlast_usb $end
$var reg 1 u" rdvalid_usb $end
$var reg 1 v" rdready_usb $end
$var reg 2 w" rres_usb[1:0] $end
$var reg 32 x" waddr_audio[31:0] $end
$var reg 10 y" wlen_audio[9:0] $end
$var reg 10 z" wsize_audio[9:0] $end
$var reg 1 {" wvalid_audio $end
$var reg 1 |" wready_audio $end
$var reg 32 }" wdata_audio[31:0] $end
$var reg 4 !# wtrb_audio[3:0] $end
$var reg 1 "# wlast_audio $end
$var reg 1 ## wdvalid_audio $end
$var reg 1 $# wdataready_audio $end
$var reg 1 %# wrready_audio $end
$var reg 1 &# wrvalid_audio $end
$var reg 2 '# wrsp_audio[1:0] $end
$var reg 32 (# raddr_audio[31:0] $end
$var reg 10 )# rlen_audio[9:0] $end
$var reg 10 *# rsize_audio[9:0] $end
$var reg 1 +# rvalid_audio $end
$var reg 1 ,# rready_audio $end
$var reg 32 -# rdata_audio[31:0] $end
$var reg 4 .# rstrb_audio[3:0] $end
$var reg 1 /# rlast_audio $end
$var reg 1 0# rdvalid_audio $end
$var reg 1 1# rdready_audio $end
$var reg 2 2# rres_audio[1:0] $end
$scope module cpu1 $end
$var reg 1 3# reset $end
$var reg 1 4# clock $end
$var integer 32 5# seed $end
$var reg 73 6# cpu_res[72:0] $end
$var reg 73 7# cpu_req[72:0] $end
$var reg 1 8# full_c $end
$var reg 73 9# tmp_req[72:0] $end
$var integer 32 :# rand1 $end
$var reg 32 ;# rand2[31:0] $end
$var reg 32 <# rand3[31:0] $end
$upscope $end
$scope module cpu2 $end
$var reg 1 =# reset $end
$var reg 1 ># clock $end
$var integer 32 ?# seed $end
$var reg 73 @# cpu_res[72:0] $end
$var reg 73 A# cpu_req[72:0] $end
$var reg 1 B# full_c $end
$var reg 73 C# tmp_req[72:0] $end
$var integer 32 D# rand1 $end
$var reg 32 E# rand2[31:0] $end
$var reg 32 F# rand3[31:0] $end
$upscope $end
$scope module cache1 $end
$var reg 1 G# clock $end
$var reg 1 H# reset $end
$var reg 73 I# cpu_req[72:0] $end
$var reg 73 J# snoop_req[72:0] $end
$var reg 553 K# bus_res[552:0] $end
$var reg 73 L# cpu_res[72:0] $end
$var reg 1 M# snoop_hit $end
$var reg 73 N# snoop_res[72:0] $end
$var reg 73 O# snoop_c_req[72:0] $end
$var reg 73 P# snoop_c_res[72:0] $end
$var reg 1 Q# snoop_c_hit $end
$var reg 76 R# up_snoop[75:0] $end
$var reg 76 S# up_snoop_res[75:0] $end
$var reg 1 T# up_snoop_hit $end
$var reg 553 U# wb_req[552:0] $end
$var reg 1 V# full_cprq $end
$var reg 1 W# full_srq $end
$var reg 1 X# full_brs $end
$var reg 1 Y# full_crq $end
$var reg 1 Z# full_wb $end
$var reg 1 [# full_srs $end
$var reg 73 \# cache_req[72:0] $end
$comment rom_array is not handled $end
$var reg 1 ]# we1 $end
$var reg 1 ^# we2 $end
$var reg 1 _# we3 $end
$var reg 1 `# we4 $end
$var reg 1 a# re1 $end
$var reg 1 b# re2 $end
$var reg 1 c# re3 $end
$var reg 1 d# re4 $end
$var reg 1 e# re5 $end
$var reg 1 f# we5 $end
$var reg 73 g# out1[72:0] $end
$var reg 73 h# out2[72:0] $end
$var reg 73 i# out3[72:0] $end
$var reg 73 j# out5[72:0] $end
$var reg 76 k# out4[75:0] $end
$var reg 76 l# in4[75:0] $end
$var reg 1 m# emp1 $end
$var reg 1 n# emp2 $end
$var reg 1 o# emp3 $end
$var reg 1 p# emp4 $end
$var reg 1 q# emp5 $end
$var reg 1 r# ful4 $end
$var reg 1 s# ful5 $end
$var reg 73 t# mem_req1[72:0] $end
$var reg 73 u# mem_req2[72:0] $end
$var reg 73 v# write_req[72:0] $end
$var reg 76 w# mem_req3[75:0] $end
$var reg 76 x# mem_res3[75:0] $end
$var reg 1 y# mem_ack3 $end
$var reg 73 z# mem_req2_1[72:0] $end
$var reg 73 {# mem_req2_2[72:0] $end
$var reg 1 |# mem_req2_ack1 $end
$var reg 1 }# mem_req2_ack2 $end
$var reg 553 !$ upd_req[552:0] $end
$var reg 553 "$ in3[552:0] $end
$var reg 72 #$ mem_res1[71:0] $end
$var reg 72 $$ wt_res[71:0] $end
$var reg 72 %$ upd_res[71:0] $end
$var reg 72 &$ mem_res2[71:0] $end
$var reg 1 '$ hit1 $end
$var reg 1 ($ hit2 $end
$var reg 1 )$ hit3 $end
$var reg 1 *$ upd_ack $end
$var reg 1 +$ write_ack $end
$var reg 1 ,$ mem_ack1 $end
$var reg 1 -$ mem_ack2 $end
$var reg 73 .$ in1[72:0] $end
$var reg 73 /$ in2[72:0] $end
$var reg 73 0$ in5[72:0] $end
$var reg 73 1$ cpu_res1[72:0] $end
$var reg 73 2$ cpu_res2[72:0] $end
$var reg 1 3$ ack1 $end
$var reg 1 4$ ack2 $end
$var reg 73 5$ snp_c_req1[72:0] $end
$var reg 73 6$ snp_c_req2[72:0] $end
$var reg 1 7$ snp_c_ack1 $end
$var reg 1 8$ snp_c_ack2 $end
$var reg 2 9$ prc[1:0] $end
$var reg 73 :$ tmp_cpu_res1[72:0] $end
$var reg 73 ;$ tmp_snp_res[72:0] $end
$var reg 1 <$ tmp_hit $end
$var reg 41 =$ tmp_mem[40:0] $end
$var reg 76 >$ upreq[75:0] $end
$var reg 74 ?$ snpreq[73:0] $end
$scope module cpu_req_fif $end
$var reg 1 @$ clk $end
$var reg 1 A$ rst $end
$var reg 1 B$ writeen $end
$var reg 73 C$ datain[72:0] $end
$var reg 1 D$ readen $end
$var reg 73 E$ dataout[72:0] $end
$var reg 1 F$ empty $end
$var reg 1 G$ full $end
$upscope $end
$scope module snp_res_fif $end
$var reg 1 H$ clk $end
$var reg 1 I$ rst $end
$var reg 1 J$ writeen $end
$var reg 73 K$ datain[72:0] $end
$var reg 1 L$ readen $end
$var reg 73 M$ dataout[72:0] $end
$var reg 1 N$ empty $end
$var reg 1 O$ full $end
$upscope $end
$scope module up_snp_req_fif $end
$var reg 1 P$ clk $end
$var reg 1 Q$ rst $end
$var reg 1 R$ writeen $end
$var reg 76 S$ datain[75:0] $end
$var reg 1 T$ readen $end
$var reg 76 U$ dataout[75:0] $end
$var reg 1 V$ empty $end
$var reg 1 W$ full $end
$upscope $end
$scope module snp_req_fif $end
$var reg 1 X$ clk $end
$var reg 1 Y$ rst $end
$var reg 1 Z$ writeen $end
$var reg 73 [$ datain[72:0] $end
$var reg 1 \$ readen $end
$var reg 73 ]$ dataout[72:0] $end
$var reg 1 ^$ empty $end
$var reg 1 _$ full $end
$upscope $end
$scope module bus_res_fif $end
$var reg 1 `$ clk $end
$var reg 1 a$ rst $end
$var reg 1 b$ writeen $end
$var reg 553 c$ datain[552:0] $end
$var reg 1 d$ readen $end
$var reg 553 e$ dataout[552:0] $end
$var reg 1 f$ empty $end
$var reg 1 g$ full $end
$upscope $end
$scope module cpu_res_arbitor $end
$var reg 1 h$ clock $end
$var reg 1 i$ reset $end
$var reg 73 j$ din1[72:0] $end
$var reg 1 k$ ack1 $end
$var reg 73 l$ din2[72:0] $end
$var reg 1 m$ ack2 $end
$var reg 73 n$ dout[72:0] $end
$var reg 1 o$ s_ack1 $end
$var reg 1 p$ s_ack2 $end
$var reg 1 q$ s_token $end
$upscope $end
$scope module snp_c_req_arbitor $end
$var reg 1 r$ clock $end
$var reg 1 s$ reset $end
$var reg 73 t$ din1[72:0] $end
$var reg 1 u$ ack1 $end
$var reg 73 v$ din2[72:0] $end
$var reg 1 w$ ack2 $end
$var reg 73 x$ dout[72:0] $end
$var reg 1 y$ s_ack1 $end
$var reg 1 z$ s_ack2 $end
$var reg 1 {$ s_token $end
$upscope $end
$scope module mem_req2_arbitor $end
$var reg 1 |$ clock $end
$var reg 1 }$ reset $end
$var reg 73 !% din1[72:0] $end
$var reg 1 "% ack1 $end
$var reg 73 #% din2[72:0] $end
$var reg 1 $% ack2 $end
$var reg 73 %% dout[72:0] $end
$var reg 1 &% s_ack1 $end
$var reg 1 '% s_ack2 $end
$var reg 1 (% s_token $end
$upscope $end
$upscope $end
$scope module cache2 $end
$var reg 1 )% clock $end
$var reg 1 *% reset $end
$var reg 73 +% cpu_req[72:0] $end
$var reg 73 ,% snoop_req[72:0] $end
$var reg 553 -% bus_res[552:0] $end
$var reg 73 .% cpu_res[72:0] $end
$var reg 1 /% snoop_hit $end
$var reg 73 0% snoop_res[72:0] $end
$var reg 73 1% snoop_c_req[72:0] $end
$var reg 73 2% snoop_c_res[72:0] $end
$var reg 1 3% snoop_c_hit $end
$var reg 76 4% up_snoop[75:0] $end
$var reg 76 5% up_snoop_res[75:0] $end
$var reg 1 6% up_snoop_hit $end
$var reg 553 7% wb_req[552:0] $end
$var reg 1 8% full_cprq $end
$var reg 1 9% full_srq $end
$var reg 1 :% full_brs $end
$var reg 1 ;% full_crq $end
$var reg 1 <% full_wb $end
$var reg 1 =% full_srs $end
$var reg 73 >% cache_req[72:0] $end
$comment rom_array is not handled $end
$var reg 1 ?% we1 $end
$var reg 1 @% we2 $end
$var reg 1 A% we3 $end
$var reg 1 B% we4 $end
$var reg 1 C% re1 $end
$var reg 1 D% re2 $end
$var reg 1 E% re3 $end
$var reg 1 F% re4 $end
$var reg 1 G% re5 $end
$var reg 1 H% we5 $end
$var reg 73 I% out1[72:0] $end
$var reg 73 J% out2[72:0] $end
$var reg 73 K% out3[72:0] $end
$var reg 73 L% out5[72:0] $end
$var reg 76 M% out4[75:0] $end
$var reg 76 N% in4[75:0] $end
$var reg 1 O% emp1 $end
$var reg 1 P% emp2 $end
$var reg 1 Q% emp3 $end
$var reg 1 R% emp4 $end
$var reg 1 S% emp5 $end
$var reg 1 T% ful4 $end
$var reg 1 U% ful5 $end
$var reg 73 V% mem_req1[72:0] $end
$var reg 73 W% mem_req2[72:0] $end
$var reg 73 X% write_req[72:0] $end
$var reg 76 Y% mem_req3[75:0] $end
$var reg 76 Z% mem_res3[75:0] $end
$var reg 1 [% mem_ack3 $end
$var reg 73 \% mem_req2_1[72:0] $end
$var reg 73 ]% mem_req2_2[72:0] $end
$var reg 1 ^% mem_req2_ack1 $end
$var reg 1 _% mem_req2_ack2 $end
$var reg 553 `% upd_req[552:0] $end
$var reg 553 a% in3[552:0] $end
$var reg 72 b% mem_res1[71:0] $end
$var reg 72 c% wt_res[71:0] $end
$var reg 72 d% upd_res[71:0] $end
$var reg 72 e% mem_res2[71:0] $end
$var reg 1 f% hit1 $end
$var reg 1 g% hit2 $end
$var reg 1 h% hit3 $end
$var reg 1 i% upd_ack $end
$var reg 1 j% write_ack $end
$var reg 1 k% mem_ack1 $end
$var reg 1 l% mem_ack2 $end
$var reg 73 m% in1[72:0] $end
$var reg 73 n% in2[72:0] $end
$var reg 73 o% in5[72:0] $end
$var reg 73 p% cpu_res1[72:0] $end
$var reg 73 q% cpu_res2[72:0] $end
$var reg 1 r% ack1 $end
$var reg 1 s% ack2 $end
$var reg 73 t% snp_c_req1[72:0] $end
$var reg 73 u% snp_c_req2[72:0] $end
$var reg 1 v% snp_c_ack1 $end
$var reg 1 w% snp_c_ack2 $end
$var reg 2 x% prc[1:0] $end
$var reg 73 y% tmp_cpu_res1[72:0] $end
$var reg 73 z% tmp_snp_res[72:0] $end
$var reg 1 {% tmp_hit $end
$var reg 41 |% tmp_mem[40:0] $end
$var reg 76 }% upreq[75:0] $end
$var reg 74 !& snpreq[73:0] $end
$scope module cpu_req_fif $end
$var reg 1 "& clk $end
$var reg 1 #& rst $end
$var reg 1 $& writeen $end
$var reg 73 %& datain[72:0] $end
$var reg 1 && readen $end
$var reg 73 '& dataout[72:0] $end
$var reg 1 (& empty $end
$var reg 1 )& full $end
$upscope $end
$scope module snp_res_fif $end
$var reg 1 *& clk $end
$var reg 1 +& rst $end
$var reg 1 ,& writeen $end
$var reg 73 -& datain[72:0] $end
$var reg 1 .& readen $end
$var reg 73 /& dataout[72:0] $end
$var reg 1 0& empty $end
$var reg 1 1& full $end
$upscope $end
$scope module up_snp_req_fif $end
$var reg 1 2& clk $end
$var reg 1 3& rst $end
$var reg 1 4& writeen $end
$var reg 76 5& datain[75:0] $end
$var reg 1 6& readen $end
$var reg 76 7& dataout[75:0] $end
$var reg 1 8& empty $end
$var reg 1 9& full $end
$upscope $end
$scope module snp_req_fif $end
$var reg 1 :& clk $end
$var reg 1 ;& rst $end
$var reg 1 <& writeen $end
$var reg 73 =& datain[72:0] $end
$var reg 1 >& readen $end
$var reg 73 ?& dataout[72:0] $end
$var reg 1 @& empty $end
$var reg 1 A& full $end
$upscope $end
$scope module bus_res_fif $end
$var reg 1 B& clk $end
$var reg 1 C& rst $end
$var reg 1 D& writeen $end
$var reg 553 E& datain[552:0] $end
$var reg 1 F& readen $end
$var reg 553 G& dataout[552:0] $end
$var reg 1 H& empty $end
$var reg 1 I& full $end
$upscope $end
$scope module cpu_res_arbitor $end
$var reg 1 J& clock $end
$var reg 1 K& reset $end
$var reg 73 L& din1[72:0] $end
$var reg 1 M& ack1 $end
$var reg 73 N& din2[72:0] $end
$var reg 1 O& ack2 $end
$var reg 73 P& dout[72:0] $end
$var reg 1 Q& s_ack1 $end
$var reg 1 R& s_ack2 $end
$var reg 1 S& s_token $end
$upscope $end
$scope module snp_c_req_arbitor $end
$var reg 1 T& clock $end
$var reg 1 U& reset $end
$var reg 73 V& din1[72:0] $end
$var reg 1 W& ack1 $end
$var reg 73 X& din2[72:0] $end
$var reg 1 Y& ack2 $end
$var reg 73 Z& dout[72:0] $end
$var reg 1 [& s_ack1 $end
$var reg 1 \& s_ack2 $end
$var reg 1 ]& s_token $end
$upscope $end
$scope module mem_req2_arbitor $end
$var reg 1 ^& clock $end
$var reg 1 _& reset $end
$var reg 73 `& din1[72:0] $end
$var reg 1 a& ack1 $end
$var reg 73 b& din2[72:0] $end
$var reg 1 c& ack2 $end
$var reg 73 d& dout[72:0] $end
$var reg 1 e& s_ack1 $end
$var reg 1 f& s_ack2 $end
$var reg 1 g& s_token $end
$upscope $end
$upscope $end
$scope module power $end
$var reg 1 h& clock $end
$var reg 1 i& reset $end
$var reg 5 j& req[4:0] $end
$var reg 5 k& res[4:0] $end
$var reg 1 l& full_preq $end
$var reg 3 m& gfxres[2:0] $end
$var reg 3 n& gfxreq[2:0] $end
$var reg 3 o& audiores[2:0] $end
$var reg 3 p& audioreq[2:0] $end
$var reg 3 q& usbres[2:0] $end
$var reg 3 r& usbreq[2:0] $end
$var reg 3 s& uartres[2:0] $end
$var reg 3 t& uartreq[2:0] $end
$var reg 5 u& tmp_req[4:0] $end
$var reg 5 v& in1[4:0] $end
$var reg 5 w& out1[4:0] $end
$var reg 3 x& in2[2:0] $end
$var reg 3 y& out2[2:0] $end
$var reg 1 z& we1 $end
$var reg 1 {& re1 $end
$var reg 1 |& emp1 $end
$var reg 1 }& we2 $end
$var reg 1 !' re2 $end
$var reg 1 "' emp2 $end
$scope module pwr_req_fif $end
$var reg 1 #' clk $end
$var reg 1 $' rst $end
$var reg 1 %' writeen $end
$var reg 5 &' datain[4:0] $end
$var reg 1 '' readen $end
$var reg 5 (' dataout[4:0] $end
$var reg 1 )' empty $end
$var reg 1 *' full $end
$upscope $end
$upscope $end
$scope module interconnect $end
$var reg 1 +' clock $end
$var reg 1 ,' reset $end
$var reg 73 -' cache_req1[72:0] $end
$var reg 73 .' cache_req2[72:0] $end
$var reg 553 /' wb_req1[552:0] $end
$var reg 553 0' wb_req2[552:0] $end
$var reg 553 1' bus_res1[552:0] $end
$var reg 553 2' bus_res2[552:0] $end
$var reg 76 3' snoop_req1[75:0] $end
$var reg 76 4' snoop_res1[75:0] $end
$var reg 1 5' snp_hit1 $end
$var reg 1 6' full_srq1 $end
$var reg 1 7' full_wb1 $end
$var reg 1 8' full_srs1 $end
$var reg 1 9' full_wb2 $end
$var reg 1 :' full_mrs $end
$var reg 5 ;' pwrreq[4:0] $end
$var reg 1 <' pwrreq_full $end
$var reg 5 =' pwrres[4:0] $end
$var reg 73 >' gfx_upreq[72:0] $end
$var reg 73 ?' gfx_upres[72:0] $end
$var reg 1 @' gfx_upreq_full $end
$var reg 73 A' audio_upreq[72:0] $end
$var reg 73 B' audio_upres[72:0] $end
$var reg 1 C' audio_upreq_full $end
$var reg 73 D' usb_upreq[72:0] $end
$var reg 73 E' usb_upres[72:0] $end
$var reg 1 F' usb_upreq_full $end
$var reg 73 G' uart_upreq[72:0] $end
$var reg 73 H' uart_upres[72:0] $end
$var reg 1 I' uart_upreq_full $end
$var reg 32 J' waddr[31:0] $end
$var reg 10 K' wlen[9:0] $end
$var reg 10 L' wsize[9:0] $end
$var reg 1 M' wvalid $end
$var reg 1 N' wready $end
$var reg 32 O' wdata[31:0] $end
$var reg 4 P' wtrb[3:0] $end
$var reg 1 Q' wlast $end
$var reg 1 R' wdvalid $end
$var reg 1 S' wdataready $end
$var reg 1 T' wrready $end
$var reg 1 U' wrvalid $end
$var reg 2 V' wrsp[1:0] $end
$var reg 32 W' raddr[31:0] $end
$var reg 10 X' rlen[9:0] $end
$var reg 10 Y' rsize[9:0] $end
$var reg 1 Z' rvalid $end
$var reg 1 [' rready $end
$var reg 32 \' rdata[31:0] $end
$var reg 4 ]' rstrb[3:0] $end
$var reg 1 ^' rlast $end
$var reg 1 _' rdvalid $end
$var reg 1 `' rdready $end
$var reg 2 a' rres[1:0] $end
$var reg 32 b' waddr_usb[31:0] $end
$var reg 10 c' wlen_usb[9:0] $end
$var reg 10 d' wsize_usb[9:0] $end
$var reg 1 e' wvalid_usb $end
$var reg 1 f' wready_usb $end
$var reg 32 g' wdata_usb[31:0] $end
$var reg 4 h' wtrb_usb[3:0] $end
$var reg 1 i' wlast_usb $end
$var reg 1 j' wdvalid_usb $end
$var reg 1 k' wdataready_usb $end
$var reg 1 l' wrready_usb $end
$var reg 1 m' wrvalid_usb $end
$var reg 2 n' wrsp_usb[1:0] $end
$var reg 32 o' raddr_usb[31:0] $end
$var reg 10 p' rlen_usb[9:0] $end
$var reg 10 q' rsize_usb[9:0] $end
$var reg 1 r' rvalid_usb $end
$var reg 1 s' rready_usb $end
$var reg 32 t' rdata_usb[31:0] $end
$var reg 4 u' rstrb_usb[3:0] $end
$var reg 1 v' rlast_usb $end
$var reg 1 w' rdvalid_usb $end
$var reg 1 x' rdready_usb $end
$var reg 2 y' rres_usb[1:0] $end
$var reg 32 z' waddr_gfx[31:0] $end
$var reg 10 {' wlen_gfx[9:0] $end
$var reg 10 |' wsize_gfx[9:0] $end
$var reg 1 }' wvalid_gfx $end
$var reg 1 !( wready_gfx $end
$var reg 32 "( wdata_gfx[31:0] $end
$var reg 4 #( wtrb_gfx[3:0] $end
$var reg 1 $( wlast_gfx $end
$var reg 1 %( wdvalid_gfx $end
$var reg 1 &( wdataready_gfx $end
$var reg 1 '( wrready_gfx $end
$var reg 1 (( wrvalid_gfx $end
$var reg 2 )( wrsp_gfx[1:0] $end
$var reg 32 *( raddr_gfx[31:0] $end
$var reg 10 +( rlen_gfx[9:0] $end
$var reg 10 ,( rsize_gfx[9:0] $end
$var reg 1 -( rvalid_gfx $end
$var reg 1 .( rready_gfx $end
$var reg 32 /( rdata_gfx[31:0] $end
$var reg 4 0( rstrb_gfx[3:0] $end
$var reg 1 1( rlast_gfx $end
$var reg 1 2( rdvalid_gfx $end
$var reg 1 3( rdready_gfx $end
$var reg 2 4( rres_gfx[1:0] $end
$var reg 32 5( waddr_uart[31:0] $end
$var reg 10 6( wlen_uart[9:0] $end
$var reg 10 7( wsize_uart[9:0] $end
$var reg 1 8( wvalid_uart $end
$var reg 1 9( wready_uart $end
$var reg 32 :( wdata_uart[31:0] $end
$var reg 4 ;( wtrb_uart[3:0] $end
$var reg 1 <( wlast_uart $end
$var reg 1 =( wdvalid_uart $end
$var reg 1 >( wdataready_uart $end
$var reg 1 ?( wrready_uart $end
$var reg 1 @( wrvalid_uart $end
$var reg 2 A( wrsp_uart[1:0] $end
$var reg 32 B( raddr_uart[31:0] $end
$var reg 10 C( rlen_uart[9:0] $end
$var reg 10 D( rsize_uart[9:0] $end
$var reg 1 E( rvalid_uart $end
$var reg 1 F( rready_uart $end
$var reg 32 G( rdata_uart[31:0] $end
$var reg 4 H( rstrb_uart[3:0] $end
$var reg 1 I( rlast_uart $end
$var reg 1 J( rdvalid_uart $end
$var reg 1 K( rdready_uart $end
$var reg 2 L( rres_uart[1:0] $end
$var reg 32 M( waddr_audio[31:0] $end
$var reg 10 N( wlen_audio[9:0] $end
$var reg 10 O( wsize_audio[9:0] $end
$var reg 1 P( wvalid_audio $end
$var reg 1 Q( wready_audio $end
$var reg 32 R( wdata_audio[31:0] $end
$var reg 4 S( wtrb_audio[3:0] $end
$var reg 1 T( wlast_audio $end
$var reg 1 U( wdvalid_audio $end
$var reg 1 V( wdataready_audio $end
$var reg 1 W( wrready_audio $end
$var reg 1 X( wrvalid_audio $end
$var reg 2 Y( wrsp_audio[1:0] $end
$var reg 32 Z( raddr_audio[31:0] $end
$var reg 10 [( rlen_audio[9:0] $end
$var reg 10 \( rsize_audio[9:0] $end
$var reg 1 ]( rvalid_audio $end
$var reg 1 ^( rready_audio $end
$var reg 32 _( rdata_audio[31:0] $end
$var reg 4 `( rstrb_audio[3:0] $end
$var reg 1 a( rlast_audio $end
$var reg 1 b( rdvalid_audio $end
$var reg 1 c( rdready_audio $end
$var reg 2 d( rres_audio[1:0] $end
$var reg 553 e( in6[552:0] $end
$var reg 553 f( in7[552:0] $end
$var reg 553 g( out6[552:0] $end
$var reg 553 h( out7[552:0] $end
$var reg 77 i( in2[76:0] $end
$var reg 77 j( out2[76:0] $end
$var reg 1 k( we2 $end
$var reg 1 l( we6 $end
$var reg 1 m( we7 $end
$var reg 1 n( re7 $end
$var reg 1 o( re2 $end
$var reg 1 p( re6 $end
$var reg 1 q( emp2 $end
$var reg 1 r( emp6 $end
$var reg 1 s( emp7 $end
$var reg 1 t( ful2 $end
$var reg 553 u( bus_res1_1[552:0] $end
$var reg 553 v( bus_res1_2[552:0] $end
$var reg 553 w( bus_res2_1[552:0] $end
$var reg 553 x( bus_res2_2[552:0] $end
$var reg 1 y( mem_ack1 $end
$var reg 1 z( mem_ack2 $end
$var reg 1 {( brs1_ack1 $end
$var reg 1 |( brs1_ack2 $end
$var reg 1 }( brs2_ack1 $end
$var reg 1 !) brs2_ack2 $end
$var reg 1 ") mem_ack $end
$var reg 1 #) mem_ack3 $end
$var reg 1 $) mem_ack4 $end
$var reg 1 %) mem_ack5 $end
$var reg 1 &) mem_ack6 $end
$var reg 76 ') tomem1[75:0] $end
$var reg 76 () tomem2[75:0] $end
$var reg 76 )) tomem3[75:0] $end
$var reg 76 *) tomem4[75:0] $end
$var reg 76 +) tomem5[75:0] $end
$var reg 76 ,) tomem6[75:0] $end
$var reg 1 -) wb_ack1 $end
$var reg 1 .) wb_ack2 $end
$var reg 553 /) mem_wb1[552:0] $end
$var reg 553 0) mem_wb2[552:0] $end
$var reg 1 1) gfxpoweron $end
$var reg 32 2) adr_0[31:0] $end
$var reg 32 3) adr_1[31:0] $end
$var reg 73 4) tmp_sp1[72:0] $end
$var reg 73 5) tmp_sp2[72:0] $end
$var reg 5 6) pwr_req1[4:0] $end
$var reg 5 7) pwr_req2[4:0] $end
$var reg 1 8) pwr_ack1 $end
$var reg 1 9) pwr_ack2 $end
$var reg 553 :) mem_wb[552:0] $end
$var reg 553 ;) gfx_wb[552:0] $end
$var reg 553 <) audio_wb[552:0] $end
$var reg 553 =) usb_wb[552:0] $end
$var reg 553 >) uart_wb[552:0] $end
$var reg 76 ?) tomem_p[75:0] $end
$var reg 76 @) togfx_p[75:0] $end
$var reg 76 A) touart_p[75:0] $end
$var reg 76 B) tousb_p[75:0] $end
$var reg 76 C) toaudio_p[75:0] $end
$var reg 73 D) in9[72:0] $end
$var reg 73 E) out9[72:0] $end
$var reg 73 F) in13[72:0] $end
$var reg 73 G) out13[72:0] $end
$var reg 73 H) in14[72:0] $end
$var reg 73 I) out14[72:0] $end
$var reg 73 J) in15[72:0] $end
$var reg 73 K) out15[72:0] $end
$var reg 76 L) in8[75:0] $end
$var reg 76 M) out8[75:0] $end
$var reg 76 N) in10[75:0] $end
$var reg 76 O) out10[75:0] $end
$var reg 76 P) in11[75:0] $end
$var reg 76 Q) out11[75:0] $end
$var reg 76 R) in12[75:0] $end
$var reg 76 S) out12[75:0] $end
$var reg 1 T) we8 $end
$var reg 1 U) re8 $end
$var reg 1 V) re9 $end
$var reg 1 W) we9 $end
$var reg 1 X) re10 $end
$var reg 1 Y) we10 $end
$var reg 1 Z) re11 $end
$var reg 1 [) we11 $end
$var reg 1 \) re12 $end
$var reg 1 ]) we12 $end
$var reg 1 ^) re13 $end
$var reg 1 _) we13 $end
$var reg 1 `) re14 $end
$var reg 1 a) we14 $end
$var reg 1 b) re15 $end
$var reg 1 c) we15 $end
$var reg 1 d) emp8 $end
$var reg 1 e) emp9 $end
$var reg 1 f) emp10 $end
$var reg 1 g) emp11 $end
$var reg 1 h) emp12 $end
$var reg 1 i) emp13 $end
$var reg 1 j) emp14 $end
$var reg 1 k) emp15 $end
$var reg 553 l) bus_res1_3[552:0] $end
$var reg 553 m) bus_res2_3[552:0] $end
$var reg 553 n) bus_res1_4[552:0] $end
$var reg 553 o) bus_res1_5[552:0] $end
$var reg 553 p) bus_res1_7[552:0] $end
$var reg 553 q) bus_res2_4[552:0] $end
$var reg 553 r) bus_res2_5[552:0] $end
$var reg 553 s) bus_res1_6[552:0] $end
$var reg 553 t) bus_res2_6[552:0] $end
$var reg 1 u) gfx_ack1 $end
$var reg 1 v) gfx_ack2 $end
$var reg 1 w) audio_ack1 $end
$var reg 1 x) audio_ack2 $end
$var reg 1 y) usb_ack1 $end
$var reg 1 z) usb_ack2 $end
$var reg 1 {) uart_ack1 $end
$var reg 1 |) gfx_ack3 $end
$var reg 1 }) gfx_ack4 $end
$var reg 1 !* gfx_ack5 $end
$var reg 1 "* gfx_ack6 $end
$var reg 1 #* uart_ack3 $end
$var reg 1 $* uart_ack4 $end
$var reg 1 %* uart_ack5 $end
$var reg 1 &* uart_ack6 $end
$var reg 1 '* usb_ack3 $end
$var reg 1 (* usb_ack4 $end
$var reg 1 )* usb_ack5 $end
$var reg 1 ** usb_ack6 $end
$var reg 1 +* audio_ack3 $end
$var reg 1 ,* audio_ack4 $end
$var reg 1 -* audio_ack5 $end
$var reg 1 .* audio_ack6 $end
$var reg 1 /* uart_ack2 $end
$var reg 1 0* brs1_ack3 $end
$var reg 1 1* brs2_ack3 $end
$var reg 1 2* brs1_ack4 $end
$var reg 1 3* brs1_ack5 $end
$var reg 1 4* brs1_ack6 $end
$var reg 1 5* brs1_ack7 $end
$var reg 1 6* brs2_ack5 $end
$var reg 1 7* brs2_ack4 $end
$var reg 1 8* brs2_ack6 $end
$var reg 76 9* togfx1[75:0] $end
$var reg 76 :* togfx2[75:0] $end
$var reg 76 ;* togfx3[75:0] $end
$var reg 76 <* togfx4[75:0] $end
$var reg 76 =* togfx5[75:0] $end
$var reg 76 >* togfx6[75:0] $end
$var reg 76 ?* toaudio1[75:0] $end
$var reg 76 @* toaudio2[75:0] $end
$var reg 76 A* toaudio3[75:0] $end
$var reg 76 B* toaudio4[75:0] $end
$var reg 76 C* toaudio5[75:0] $end
$var reg 76 D* toaudio6[75:0] $end
$var reg 76 E* tousb1[75:0] $end
$var reg 76 F* tousb2[75:0] $end
$var reg 76 G* tousb3[75:0] $end
$var reg 76 H* tousb4[75:0] $end
$var reg 76 I* tousb5[75:0] $end
$var reg 76 J* tousb6[75:0] $end
$var reg 76 K* touart1[75:0] $end
$var reg 76 L* touart2[75:0] $end
$var reg 76 M* touart3[75:0] $end
$var reg 76 N* touart4[75:0] $end
$var reg 76 O* touart5[75:0] $end
$var reg 76 P* touart6[75:0] $end
$var reg 1 Q* gfx_wb_ack1 $end
$var reg 1 R* gfx_wb_ack2 $end
$var reg 1 S* audio_wb_ack1 $end
$var reg 1 T* audio_wb_ack2 $end
$var reg 1 U* usb_wb_ack1 $end
$var reg 1 V* usb_wb_ack2 $end
$var reg 1 W* uart_wb_ack1 $end
$var reg 1 X* uart_wb_ack2 $end
$var reg 553 Y* gfx_wb1[552:0] $end
$var reg 553 Z* gfx_wb2[552:0] $end
$var reg 553 [* audio_wb1[552:0] $end
$var reg 553 \* audio_wb2[552:0] $end
$var reg 553 ]* usb_wb1[552:0] $end
$var reg 553 ^* usb_wb2[552:0] $end
$var reg 553 _* uart_wb1[552:0] $end
$var reg 553 `* uart_wb2[552:0] $end
$var reg 1 a* audiopoweron $end
$var reg 1 b* usbpoweron $end
$var reg 1 c* uartpoweron $end
$var reg 5 d* pwr_req3[4:0] $end
$var reg 5 e* pwr_req4[4:0] $end
$var reg 5 f* pwr_req5[4:0] $end
$var reg 5 g* pwr_req6[4:0] $end
$var reg 1 h* pwr_ack3 $end
$var reg 1 i* pwr_ack4 $end
$var reg 1 j* pwr_ack5 $end
$var reg 1 k* pwr_ack6 $end
$var reg 76 l* snp1_1[75:0] $end
$var reg 76 m* snp1_2[75:0] $end
$var reg 76 n* snp1_3[75:0] $end
$var reg 76 o* snp1_4[75:0] $end
$var reg 76 p* snp1_5[75:0] $end
$var reg 76 q* snp1_6[75:0] $end
$var reg 76 r* snp2_1[75:0] $end
$var reg 76 s* snp2_2[75:0] $end
$var reg 76 t* snp2_3[75:0] $end
$var reg 76 u* snp2_4[75:0] $end
$var reg 76 v* snp2_5[75:0] $end
$var reg 76 w* snp2_6[75:0] $end
$var reg 1 x* snp1_ack1 $end
$var reg 1 y* snp1_ack2 $end
$var reg 1 z* snp1_ack3 $end
$var reg 1 {* snp1_ack4 $end
$var reg 1 |* snp1_ack5 $end
$var reg 1 }* snp1_ack6 $end
$var reg 1 !+ snp2_ack1 $end
$var reg 1 "+ snp2_ack2 $end
$var reg 1 #+ snp2_ack3 $end
$var reg 1 $+ snp2_ack4 $end
$var reg 1 %+ snp2_ack5 $end
$var reg 1 &+ snp2_ack6 $end
$var reg 73 '+ gfx_upres1[72:0] $end
$var reg 73 (+ gfx_upres2[72:0] $end
$var reg 73 )+ gfx_upres3[72:0] $end
$var reg 1 *+ gfx_upres_ack1 $end
$var reg 1 ++ gfx_upres_ack2 $end
$var reg 1 ,+ gfx_upres_ack3 $end
$var reg 73 -+ audio_upres1[72:0] $end
$var reg 73 .+ audio_upres2[72:0] $end
$var reg 73 /+ audio_upres3[72:0] $end
$var reg 1 0+ audio_upres_ack1 $end
$var reg 1 1+ audio_upres_ack2 $end
$var reg 1 2+ audio_upres_ack3 $end
$var reg 73 3+ usb_upres1[72:0] $end
$var reg 73 4+ usb_upres2[72:0] $end
$var reg 73 5+ usb_upres3[72:0] $end
$var reg 1 6+ usb_upres_ack1 $end
$var reg 1 7+ usb_upres_ack2 $end
$var reg 1 8+ usb_upres_ack3 $end
$var reg 73 9+ uart_upres1[72:0] $end
$var reg 73 :+ uart_upres2[72:0] $end
$var reg 73 ;+ uart_upres3[72:0] $end
$var reg 1 <+ uart_upres_ack1 $end
$var reg 1 =+ uart_upres_ack2 $end
$var reg 1 >+ uart_upres_ack3 $end
$var reg 73 ?+ gfx_upres4[72:0] $end
$var reg 73 @+ gfx_upres5[72:0] $end
$var reg 73 A+ gfx_upres6[72:0] $end
$var reg 1 B+ gfx_upres_ack4 $end
$var reg 1 C+ gfx_upres_ack5 $end
$var reg 1 D+ gfx_upres_ack6 $end
$var reg 73 E+ audio_upres4[72:0] $end
$var reg 73 F+ audio_upres5[72:0] $end
$var reg 73 G+ audio_upres6[72:0] $end
$var reg 1 H+ audio_upres_ack4 $end
$var reg 1 I+ audio_upres_ack5 $end
$var reg 1 J+ audio_upres_ack6 $end
$var reg 73 K+ usb_upres4[72:0] $end
$var reg 73 L+ usb_upres5[72:0] $end
$var reg 73 M+ usb_upres6[72:0] $end
$var reg 1 N+ usb_upres_ack4 $end
$var reg 1 O+ usb_upres_ack5 $end
$var reg 1 P+ usb_upres_ack6 $end
$var reg 73 Q+ uart_upres4[72:0] $end
$var reg 73 R+ uart_upres5[72:0] $end
$var reg 73 S+ uart_upres6[72:0] $end
$var reg 1 T+ uart_upres_ack4 $end
$var reg 1 U+ uart_upres_ack5 $end
$var reg 1 V+ uart_upres_ack6 $end
$var reg 76 W+ gfx_write1[75:0] $end
$var reg 76 X+ mem_write1[75:0] $end
$var reg 76 Y+ usb_write1[75:0] $end
$var reg 76 Z+ uart_write1[75:0] $end
$var reg 76 [+ audio_write1[75:0] $end
$var reg 553 \+ mem_write2[552:0] $end
$var reg 553 ]+ mem_write3[552:0] $end
$var reg 553 ^+ gfx_write2[552:0] $end
$var reg 553 _+ gfx_write3[552:0] $end
$var reg 553 `+ usb_write2[552:0] $end
$var reg 553 a+ usb_write3[552:0] $end
$var reg 553 b+ uart_write2[552:0] $end
$var reg 553 c+ uart_write3[552:0] $end
$var reg 553 d+ audio_write2[552:0] $end
$var reg 553 e+ audio_write3[552:0] $end
$var reg 1 f+ mem_write_ack1 $end
$var reg 1 g+ gfx_write_ack1 $end
$var reg 1 h+ usb_write_ack1 $end
$var reg 1 i+ uart_write_ack1 $end
$var reg 1 j+ audio_write_ack1 $end
$var reg 1 k+ mem_write_ack2 $end
$var reg 1 l+ gfx_write_ack2 $end
$var reg 1 m+ usb_write_ack2 $end
$var reg 1 n+ uart_write_ack2 $end
$var reg 1 o+ audio_write_ack2 $end
$var reg 1 p+ mem_write_ack3 $end
$var reg 1 q+ gfx_write_ack3 $end
$var reg 1 r+ usb_write_ack3 $end
$var reg 1 s+ uart_write_ack3 $end
$var reg 1 t+ audio_write_ack3 $end
$scope module wb_fif1 $end
$var reg 1 u+ clk $end
$var reg 1 v+ rst $end
$var reg 1 w+ writeen $end
$var reg 553 x+ datain[552:0] $end
$var reg 1 y+ readen $end
$var reg 553 z+ dataout[552:0] $end
$var reg 1 {+ empty $end
$var reg 1 |+ full $end
$upscope $end
$scope module wb_fif2 $end
$var reg 1 }+ clk $end
$var reg 1 !, rst $end
$var reg 1 ", writeen $end
$var reg 553 #, datain[552:0] $end
$var reg 1 $, readen $end
$var reg 553 %, dataout[552:0] $end
$var reg 1 &, empty $end
$var reg 1 ', full $end
$upscope $end
$scope module gfx_fif $end
$var reg 1 (, clk $end
$var reg 1 ), rst $end
$var reg 1 *, writeen $end
$var reg 73 +, datain[72:0] $end
$var reg 1 ,, readen $end
$var reg 73 -, dataout[72:0] $end
$var reg 1 ., empty $end
$var reg 1 /, full $end
$upscope $end
$scope module snp_res_fifo $end
$var reg 1 0, clk $end
$var reg 1 1, rst $end
$var reg 1 2, writeen $end
$var reg 77 3, datain[76:0] $end
$var reg 1 4, readen $end
$var reg 77 5, dataout[76:0] $end
$var reg 1 6, empty $end
$var reg 1 7, full $end
$upscope $end
$scope module audio_fif $end
$var reg 1 8, clk $end
$var reg 1 9, rst $end
$var reg 1 :, writeen $end
$var reg 73 ;, datain[72:0] $end
$var reg 1 <, readen $end
$var reg 73 =, dataout[72:0] $end
$var reg 1 >, empty $end
$var reg 1 ?, full $end
$upscope $end
$scope module usb_fif $end
$var reg 1 @, clk $end
$var reg 1 A, rst $end
$var reg 1 B, writeen $end
$var reg 73 C, datain[72:0] $end
$var reg 1 D, readen $end
$var reg 73 E, dataout[72:0] $end
$var reg 1 F, empty $end
$var reg 1 G, full $end
$upscope $end
$scope module uart_fif $end
$var reg 1 H, clk $end
$var reg 1 I, rst $end
$var reg 1 J, writeen $end
$var reg 73 K, datain[72:0] $end
$var reg 1 L, readen $end
$var reg 73 M, dataout[72:0] $end
$var reg 1 N, empty $end
$var reg 1 O, full $end
$upscope $end
$scope module tomem_arbitor $end
$var reg 1 P, clock $end
$var reg 1 Q, reset $end
$var reg 76 R, din1[75:0] $end
$var reg 1 S, ack1 $end
$var reg 76 T, din2[75:0] $end
$var reg 1 U, ack2 $end
$var reg 76 V, din3[75:0] $end
$var reg 1 W, ack3 $end
$var reg 76 X, din4[75:0] $end
$var reg 1 Y, ack4 $end
$var reg 76 Z, din5[75:0] $end
$var reg 1 [, ack5 $end
$var reg 76 \, din6[75:0] $end
$var reg 1 ], ack6 $end
$var reg 76 ^, dout[75:0] $end
$var reg 1 _, s_ack1 $end
$var reg 1 `, s_ack2 $end
$var reg 1 a, s_ack3 $end
$var reg 1 b, s_ack4 $end
$var reg 1 c, s_ack5 $end
$var reg 1 d, s_ack6 $end
$var integer 32 e, s_token $end
$upscope $end
$scope module togfx_arbitor $end
$var reg 1 f, clock $end
$var reg 1 g, reset $end
$var reg 76 h, din1[75:0] $end
$var reg 1 i, ack1 $end
$var reg 76 j, din2[75:0] $end
$var reg 1 k, ack2 $end
$var reg 76 l, din3[75:0] $end
$var reg 1 m, ack3 $end
$var reg 76 n, din4[75:0] $end
$var reg 1 o, ack4 $end
$var reg 76 p, din5[75:0] $end
$var reg 1 q, ack5 $end
$var reg 76 r, din6[75:0] $end
$var reg 1 s, ack6 $end
$var reg 76 t, dout[75:0] $end
$var reg 1 u, s_ack1 $end
$var reg 1 v, s_ack2 $end
$var reg 1 w, s_ack3 $end
$var reg 1 x, s_ack4 $end
$var reg 1 y, s_ack5 $end
$var reg 1 z, s_ack6 $end
$var integer 32 {, s_token $end
$upscope $end
$scope module toaudio_arbitor $end
$var reg 1 |, clock $end
$var reg 1 }, reset $end
$var reg 76 !- din1[75:0] $end
$var reg 1 "- ack1 $end
$var reg 76 #- din2[75:0] $end
$var reg 1 $- ack2 $end
$var reg 76 %- dout[75:0] $end
$var reg 1 &- s_ack1 $end
$var reg 1 '- s_ack2 $end
$var reg 1 (- s_token $end
$upscope $end
$scope module tousb_arbitor $end
$var reg 1 )- clock $end
$var reg 1 *- reset $end
$var reg 76 +- din1[75:0] $end
$var reg 1 ,- ack1 $end
$var reg 76 -- din2[75:0] $end
$var reg 1 .- ack2 $end
$var reg 76 /- dout[75:0] $end
$var reg 1 0- s_ack1 $end
$var reg 1 1- s_ack2 $end
$var reg 1 2- s_token $end
$upscope $end
$scope module touart_arbitor $end
$var reg 1 3- clock $end
$var reg 1 4- reset $end
$var reg 76 5- din1[75:0] $end
$var reg 1 6- ack1 $end
$var reg 76 7- din2[75:0] $end
$var reg 1 8- ack2 $end
$var reg 76 9- dout[75:0] $end
$var reg 1 :- s_ack1 $end
$var reg 1 ;- s_ack2 $end
$var reg 1 <- s_token $end
$upscope $end
$scope module brs2_arbitor $end
$var reg 1 =- clock $end
$var reg 1 >- reset $end
$var reg 553 ?- din1[552:0] $end
$var reg 1 @- ack1 $end
$var reg 553 A- din2[552:0] $end
$var reg 1 B- ack2 $end
$var reg 553 C- din3[552:0] $end
$var reg 1 D- ack3 $end
$var reg 553 E- din4[552:0] $end
$var reg 1 F- ack4 $end
$var reg 553 G- din5[552:0] $end
$var reg 1 H- ack5 $end
$var reg 553 I- din6[552:0] $end
$var reg 1 J- ack6 $end
$var reg 553 K- dout[552:0] $end
$var reg 1 L- s_ack1 $end
$var reg 1 M- s_ack2 $end
$var reg 1 N- s_ack3 $end
$var reg 1 O- s_ack4 $end
$var reg 1 P- s_ack5 $end
$var reg 1 Q- s_ack6 $end
$var integer 32 R- s_token $end
$upscope $end
$scope module snp1_arbitor $end
$var reg 1 S- clock $end
$var reg 1 T- reset $end
$var reg 76 U- din1[75:0] $end
$var reg 1 V- ack1 $end
$var reg 76 W- din2[75:0] $end
$var reg 1 X- ack2 $end
$var reg 76 Y- din3[75:0] $end
$var reg 1 Z- ack3 $end
$var reg 76 [- din4[75:0] $end
$var reg 1 \- ack4 $end
$var reg 76 ]- din5[75:0] $end
$var reg 1 ^- ack5 $end
$var reg 76 _- din6[75:0] $end
$var reg 1 `- ack6 $end
$var reg 76 a- dout[75:0] $end
$var reg 1 b- s_ack1 $end
$var reg 1 c- s_ack2 $end
$var reg 1 d- s_ack3 $end
$var reg 1 e- s_ack4 $end
$var reg 1 f- s_ack5 $end
$var reg 1 g- s_ack6 $end
$var integer 32 h- s_token $end
$upscope $end
$scope module pwr_arbitor $end
$var reg 1 i- clock $end
$var reg 1 j- reset $end
$var reg 5 k- din1[4:0] $end
$var reg 1 l- ack1 $end
$var reg 5 m- din2[4:0] $end
$var reg 1 n- ack2 $end
$var reg 5 o- din3[4:0] $end
$var reg 1 p- ack3 $end
$var reg 5 q- din4[4:0] $end
$var reg 1 r- ack4 $end
$var reg 5 s- din5[4:0] $end
$var reg 1 t- ack5 $end
$var reg 5 u- din6[4:0] $end
$var reg 1 v- ack6 $end
$var reg 5 w- dout[4:0] $end
$var reg 1 x- s_ack1 $end
$var reg 1 y- s_ack2 $end
$var reg 1 z- s_ack3 $end
$var reg 1 {- s_ack4 $end
$var reg 1 |- s_ack5 $end
$var reg 1 }- s_ack6 $end
$var integer 32 !. s_token $end
$upscope $end
$scope module brs1_arbitor $end
$var reg 1 ". clock $end
$var reg 1 #. reset $end
$var reg 553 $. din1[552:0] $end
$var reg 1 %. ack1 $end
$var reg 553 &. din2[552:0] $end
$var reg 1 '. ack2 $end
$var reg 553 (. din3[552:0] $end
$var reg 1 ). ack3 $end
$var reg 553 *. din4[552:0] $end
$var reg 1 +. ack4 $end
$var reg 553 ,. din5[552:0] $end
$var reg 1 -. ack5 $end
$var reg 553 .. din6[552:0] $end
$var reg 1 /. ack6 $end
$var reg 553 0. din7[552:0] $end
$var reg 1 1. ack7 $end
$var reg 553 2. dout[552:0] $end
$var reg 1 3. s_ack1 $end
$var reg 1 4. s_ack2 $end
$var reg 1 5. s_ack3 $end
$var reg 1 6. s_ack4 $end
$var reg 1 7. s_ack5 $end
$var reg 1 8. s_ack6 $end
$var reg 1 9. s_ack7 $end
$var integer 32 :. s_token $end
$upscope $end
$scope module gfx_upres_arbitor $end
$var reg 1 ;. clock $end
$var reg 1 <. reset $end
$var reg 73 =. din1[72:0] $end
$var reg 1 >. ack1 $end
$var reg 73 ?. din2[72:0] $end
$var reg 1 @. ack2 $end
$var reg 73 A. din3[72:0] $end
$var reg 1 B. ack3 $end
$var reg 73 C. din4[72:0] $end
$var reg 1 D. ack4 $end
$var reg 73 E. din5[72:0] $end
$var reg 1 F. ack5 $end
$var reg 73 G. din6[72:0] $end
$var reg 1 H. ack6 $end
$var reg 73 I. dout[72:0] $end
$var reg 1 J. s_ack1 $end
$var reg 1 K. s_ack2 $end
$var reg 1 L. s_ack3 $end
$var reg 1 M. s_ack4 $end
$var reg 1 N. s_ack5 $end
$var reg 1 O. s_ack6 $end
$var integer 32 P. s_token $end
$upscope $end
$scope module audio_upres_arbitor $end
$var reg 1 Q. clock $end
$var reg 1 R. reset $end
$var reg 73 S. din1[72:0] $end
$var reg 1 T. ack1 $end
$var reg 73 U. din2[72:0] $end
$var reg 1 V. ack2 $end
$var reg 73 W. din3[72:0] $end
$var reg 1 X. ack3 $end
$var reg 73 Y. din4[72:0] $end
$var reg 1 Z. ack4 $end
$var reg 73 [. din5[72:0] $end
$var reg 1 \. ack5 $end
$var reg 73 ]. din6[72:0] $end
$var reg 1 ^. ack6 $end
$var reg 73 _. dout[72:0] $end
$var reg 1 `. s_ack1 $end
$var reg 1 a. s_ack2 $end
$var reg 1 b. s_ack3 $end
$var reg 1 c. s_ack4 $end
$var reg 1 d. s_ack5 $end
$var reg 1 e. s_ack6 $end
$var integer 32 f. s_token $end
$upscope $end
$scope module usb_upres_arbitor $end
$var reg 1 g. clock $end
$var reg 1 h. reset $end
$var reg 73 i. din1[72:0] $end
$var reg 1 j. ack1 $end
$var reg 73 k. din2[72:0] $end
$var reg 1 l. ack2 $end
$var reg 73 m. din3[72:0] $end
$var reg 1 n. ack3 $end
$var reg 73 o. din4[72:0] $end
$var reg 1 p. ack4 $end
$var reg 73 q. din5[72:0] $end
$var reg 1 r. ack5 $end
$var reg 73 s. din6[72:0] $end
$var reg 1 t. ack6 $end
$var reg 73 u. dout[72:0] $end
$var reg 1 v. s_ack1 $end
$var reg 1 w. s_ack2 $end
$var reg 1 x. s_ack3 $end
$var reg 1 y. s_ack4 $end
$var reg 1 z. s_ack5 $end
$var reg 1 {. s_ack6 $end
$var integer 32 |. s_token $end
$upscope $end
$scope module uart_upres_arbitor $end
$var reg 1 }. clock $end
$var reg 1 !/ reset $end
$var reg 73 "/ din1[72:0] $end
$var reg 1 #/ ack1 $end
$var reg 73 $/ din2[72:0] $end
$var reg 1 %/ ack2 $end
$var reg 73 &/ din3[72:0] $end
$var reg 1 '/ ack3 $end
$var reg 73 (/ din4[72:0] $end
$var reg 1 )/ ack4 $end
$var reg 73 */ din5[72:0] $end
$var reg 1 +/ ack5 $end
$var reg 73 ,/ din6[72:0] $end
$var reg 1 -/ ack6 $end
$var reg 73 ./ dout[72:0] $end
$var reg 1 // s_ack1 $end
$var reg 1 0/ s_ack2 $end
$var reg 1 1/ s_ack3 $end
$var reg 1 2/ s_ack4 $end
$var reg 1 3/ s_ack5 $end
$var reg 1 4/ s_ack6 $end
$var integer 32 5/ s_token $end
$upscope $end
$scope module wb_arbitor $end
$var reg 1 6/ clock $end
$var reg 1 7/ reset $end
$var reg 553 8/ din1[552:0] $end
$var reg 1 9/ ack1 $end
$var reg 553 :/ din2[552:0] $end
$var reg 1 ;/ ack2 $end
$var reg 553 </ dout[552:0] $end
$var reg 1 =/ s_ack1 $end
$var reg 1 >/ s_ack2 $end
$var reg 1 ?/ s_token $end
$upscope $end
$scope module gfx_wb_arbitor $end
$var reg 1 @/ clock $end
$var reg 1 A/ reset $end
$var reg 553 B/ din1[552:0] $end
$var reg 1 C/ ack1 $end
$var reg 553 D/ din2[552:0] $end
$var reg 1 E/ ack2 $end
$var reg 553 F/ dout[552:0] $end
$var reg 1 G/ s_ack1 $end
$var reg 1 H/ s_ack2 $end
$var reg 1 I/ s_token $end
$upscope $end
$scope module audio_wb_arbitor $end
$var reg 1 J/ clock $end
$var reg 1 K/ reset $end
$var reg 553 L/ din1[552:0] $end
$var reg 1 M/ ack1 $end
$var reg 553 N/ din2[552:0] $end
$var reg 1 O/ ack2 $end
$var reg 553 P/ dout[552:0] $end
$var reg 1 Q/ s_ack1 $end
$var reg 1 R/ s_ack2 $end
$var reg 1 S/ s_token $end
$upscope $end
$scope module usb_wb_arbitor $end
$var reg 1 T/ clock $end
$var reg 1 U/ reset $end
$var reg 553 V/ din1[552:0] $end
$var reg 1 W/ ack1 $end
$var reg 553 X/ din2[552:0] $end
$var reg 1 Y/ ack2 $end
$var reg 553 Z/ dout[552:0] $end
$var reg 1 [/ s_ack1 $end
$var reg 1 \/ s_ack2 $end
$var reg 1 ]/ s_token $end
$upscope $end
$scope module uart_wb_arbitor $end
$var reg 1 ^/ clock $end
$var reg 1 _/ reset $end
$var reg 553 `/ din1[552:0] $end
$var reg 1 a/ ack1 $end
$var reg 553 b/ din2[552:0] $end
$var reg 1 c/ ack2 $end
$var reg 553 d/ dout[552:0] $end
$var reg 1 e/ s_ack1 $end
$var reg 1 f/ s_ack2 $end
$var reg 1 g/ s_token $end
$upscope $end
$upscope $end
$scope module gfx $end
$var reg 1 h/ clock $end
$var reg 1 i/ reset $end
$var reg 32 j/ waddr[31:0] $end
$var reg 10 k/ wlen[9:0] $end
$var reg 10 l/ wsize[9:0] $end
$var reg 1 m/ wvalid $end
$var reg 1 n/ wready $end
$var reg 32 o/ wdata[31:0] $end
$var reg 4 p/ wtrb[3:0] $end
$var reg 1 q/ wlast $end
$var reg 1 r/ wdvalid $end
$var reg 1 s/ wdataready $end
$var reg 1 t/ wrready $end
$var reg 1 u/ wrvalid $end
$var reg 2 v/ wrsp[1:0] $end
$var reg 32 w/ raddr[31:0] $end
$var reg 10 x/ rlen[9:0] $end
$var reg 10 y/ rsize[9:0] $end
$var reg 1 z/ rvalid $end
$var reg 1 {/ rready $end
$var reg 32 |/ rdata[31:0] $end
$var reg 4 }/ rstrb[3:0] $end
$var reg 1 !0 rlast $end
$var reg 1 "0 rdvalid $end
$var reg 1 #0 rdready $end
$var reg 2 $0 rres[1:0] $end
$var reg 3 %0 pwrreq[2:0] $end
$var reg 3 &0 pwrres[2:0] $end
$var reg 73 '0 upreq[72:0] $end
$var reg 73 (0 upres[72:0] $end
$var reg 1 )0 upreq_full $end
$comment rom_array is not handled $end
$var reg 1 *0 poweron $end
$var reg 1 +0 emp3 $end
$var reg 1 ,0 emp2 $end
$var reg 51 -0 tmp_req[50:0] $end
$upscope $end
$scope module audio $end
$var reg 1 .0 clock $end
$var reg 1 /0 reset $end
$var reg 32 00 waddr[31:0] $end
$var reg 10 10 wlen[9:0] $end
$var reg 10 20 wsize[9:0] $end
$var reg 1 30 wvalid $end
$var reg 1 40 wready $end
$var reg 32 50 wdata[31:0] $end
$var reg 4 60 wtrb[3:0] $end
$var reg 1 70 wlast $end
$var reg 1 80 wdvalid $end
$var reg 1 90 wdataready $end
$var 